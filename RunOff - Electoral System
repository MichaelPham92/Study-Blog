#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
        printf("candidates[%i]: %s \n", i, candidates[i].name);
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    for (int i = 0; i < voter_count; i++)
    {
        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }

        printf("\n");
    }

    for (int ii = 0; ii < voter_count; ii++)
    {
        for (int jj = 0; jj < candidate_count; jj++)
        {
            printf("preferences[%i][%i]: %i ", ii, jj, preferences[ii][jj]);
        }
        printf("\n");
    }

    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();
        
        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }
        
        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("%s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }
    return 0;
}

// Record preference if vote is valid
bool vote(int voter, int rank, string name)
{
    //The array preferences[i] will represent all of the preferences for voter number i
    //, and the integer preferences[i][j] here will store the index of the candidate who is the jth preference for voter i.
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(candidates[i].name, name) == 0)
        {
            printf("candidates[%i]: %s \n", i, candidates[i].name);
            preferences[voter][rank] = i;
            printf("preferences[%i][%i]: %i \n", voter, rank, preferences[voter][rank]);
            return true;
        }
        else
        {
            continue;
        }
    }
    return false;
}

// Tabulate votes for non-eliminated candidates
void tabulate(void)
{
    // Update candidates' votes if the first preference is their name

    for (int i = 0; i < voter_count; i++)
    {
        for (int k = 0; k < candidate_count; k++)
        {
            if (candidates[preferences[i][k]].eliminated == false)
            {
                candidates[preferences[i][k]].votes++;
                printf("canidates[%i].votes: %i \n", preferences[i][k], candidates[preferences[i][k]].votes);
                break;
            }
            else if (candidates[preferences[i][k]].eliminated == true)
            {
                continue;
            }
        }
    }
    return;
}

// Print the winner of the election, if there is one
bool print_winner(void)
{
    // If any candidate has more than half of the vote, their name should be printed to stdout and the function should return true.
    // If nobody has won the election yet, the function should return false.
    bool winn = false;
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes > round(voter_count / 2))
        {
            printf("%s\n", candidates[i].name);
            winn = true;
        }
    }
    return winn;
}

// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    // The function should return the minimum vote total for any candidate who is still in the election.
    // The lowest_vote will take the first available candidate
    int lowest_vote = candidates[0].votes;
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].eliminated == false)
        {
            if (candidates[i].votes < lowest_vote)
            {
                lowest_vote = candidates[i].votes;
            }
            else if (candidates[i].votes == lowest_vote)
            {
                continue;
            }
        }
    }

    //printf("min: %i \n", lowest_vote);

    return lowest_vote;
}

// Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)
{
    // The function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.
    // The function should return true if every candidate remaining in the election has the same number of votes, and should return false otherwise.
    int not_tie_flag = false;
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].eliminated == false)
        {
            if (candidates[i].votes != min)
            {
                not_tie_flag = true;
            }
        }
    }

    if (not_tie_flag == false)
    {
        return true;
    }

    return false;
}

// Eliminate the candidate (or candidates) in last place
void eliminate(int min)
{
    // The function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.
    // The function should eliminate the candidate (or candidates) who have min number of votes.
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].eliminated == false)
        {
            if (candidates[i].votes == min)
            {
                candidates[i].eliminated = true;
                printf("candidate %s is eliminated \n", candidates[i].name);
            }
        }
    }

    return;
}
