#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// Candidates have name and vote count
typedef struct
{
    string name;
    int votes;
}
candidate;

// Array of candidates
candidate candidates[MAX];

// Number of candidates
int candidate_count;

// Function prototypes
bool vote(string name);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: plurality [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        //printf("candidate %s \n", candidates[i].name);
    }

    int voter_count = get_int("Number of voters: ");

    // Loop over all voters
    for (int i = 0; i < voter_count; i++)
    {
        string name = get_string("Vote: ");

        // Check for invalid vote
        if (!vote(name))
        {
            printf("Invalid vote.\n");
        }
    }

    // Display winner of election
    print_winner();
}

// Update vote totals given a new vote
bool vote(string name)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(candidates[i].name, name) == 0)
        {
            candidates[i].votes += 1;
            //printf("candidate %s #vote %i \n", candidates[i].name, candidates[i].votes);
            return true;
        }
    }
    return false;
}

// Print the winner (or winners) of the election
void print_winner(void)
{
    int highest_vote = 0;
    string winner;
    for (int i = 0; i < candidate_count; i++)
    {
        if (highest_vote == candidates[i].votes)
        {
            continue;
        }
        else if (highest_vote < candidates[i].votes)
        {
            highest_vote = candidates[i].votes;
        }
        else
        {
            continue;
        }
    }
    
    for (int j = 0; j < candidate_count; j++)
    {
        if (highest_vote == candidates[j].votes)
        {
            printf("%s\n", candidates[j].name);
        }
    }
    return;
    
    /*int highest_vote = 0;
    string winner[MAX];
    //highest_vote = candidates[0].votes;
    for (int i = 0; i < candidate_count; i++){              // control candidate loop
        if (highest_vote < candidates[i].votes){            // if see any candidate has higher vote
            highest_vote = candidates[i].votes;             // replace highest vote with that candidate's votes
            winner[i] = candidates[i].name;                 // store winner with candidate's name
        }
        else if (highest_vote > candidates[i].votes){       // if see any candidate has less vote
            continue;                                       // do nothing, keep highest vote as previous candidate's votes
        }
        else if (highest_vote == candidates[i].votes){      // if see any candidate with same amount of votes
            if (winner[i] == NULL && highest_vote != 0){    // if there is no name for winner yet
                winner[i] = candidates[i].name;             // put that candidate name here
            }
            else{                                           // if there is already a winner
                if (winner[i] == candidates[i].name){       // if that winner has the same name as existed one
                    continue;                               // do nothing
                }
                else {                                      // if the winner has no identical name
                    winner[i] = candidates[i].name;         // put the name as 2nd winner
                }
            }
        }
    }
    
    for (int j = 0; j < candidate_count; j++){
        if (winner[j] != NULL){
            printf("%s \n", winner[j]);
        }
        else{
            continue;
        }
    }
    return;*/
}
