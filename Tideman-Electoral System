#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
bool loop_check(int winner, int loser);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }
        // extra debug printout for ranks[max]
        /*for (int k = 0; k < candidate_count; k++)
        {
            printf("ranks[%i]: %i ", k, ranks[k]);
        }*/

        record_preferences(ranks);
        // extra debug printout for preferences[max][max]
        for (int k = 0; k < candidate_count; k++)
        {
            for (int t = 0; t < candidate_count; t++)
            {
                printf("preferences[%i][%i] %i ", k, t, preferences[k][t]);
            }
            printf("\n");
        }

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        // compare if the name is matched with candidate 's name
        if (strcmp(candidates[i], name) == 0)
        {
            // if match, put the position of candidate into the ranks array
            // rank 1: Hao, and Hao represents 0. So ranks[0] = 0
            // or rank 1: Nhi, and Nhi represents 1. So ranks[0] = 1
            ranks[rank] = i;
            //printf("ranks[%i] is %s candidate# %i\n", rank, candidates[i], i);
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    // TODO
    int a = 0, b = 0;
    // Rank 1 will win over Rank 2 and 3. And Rank 2 will win over Rank 3.
    // In case Rank order: 1, 2, 0. a = 1 and b = 1, 2, 0. This can add all case to preferences.
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = i; j < candidate_count; j++)
        {
            a = ranks[i];
            b = ranks[j];
            if (a == b)
            {
                preferences[a][b] = 0;
                //printf("preferences[%i][%i] %i\n", a, b, preferences[a][b]);
            }
            else if (a != b)
            {
                preferences[a][b]++;
                //printf("preferences[%i][%i] %i\n", a, b, preferences[a][b]);
            }
        }
    }
    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = i + 1; j < candidate_count; j++)
        {
            if (preferences[i][j] < preferences[j][i])
            {
                pairs[pair_count].winner = j;
                pairs[pair_count].loser = i;
                printf("pair: %i. winner is: %i. loser is: %i \n", pair_count, pairs[pair_count].winner,  pairs[pair_count].loser);
                pair_count++;
            }
            else if (preferences[i][j] > preferences[j][i])
            {
                pairs[pair_count].winner = i;
                pairs[pair_count].loser = j;
                printf("pair: %i. winner is: %i. loser is: %i \n", pair_count, pairs[pair_count].winner,  pairs[pair_count].loser);
                pair_count++;
            }
            else
            {
                continue;
            }
        }
    }
    // print out pair count
    //printf("pair count %i\n", pair_count);
    return;
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    // TODO
    int temp_strength = 0;
    int temp_winner = 0;
    int temp_loser = 0;
    int strength[pair_count];
    int b = 0;          // mimic pair_count
    // Calculate Strength
    for (int ii = 0; ii < candidate_count; ii++)
    {
        for (int jj = ii + 1; jj < candidate_count; jj++)
        {
            if (preferences[ii][jj] < preferences[jj][ii])
            {
                strength[b] = preferences[jj][ii] - preferences[ii][jj];
                //printf("strength[%i]: %i \n", b, strength[b]);
                b++;
            }
            else if (preferences[ii][jj] > preferences[jj][ii])
            {
                strength[b] = preferences[ii][jj] - preferences[jj][ii];
                //printf("strength[%i]: %i \n", b, strength[b]);
                b++;
            }
        }
    }

    for (int j = 0; j < pair_count - 1; j++)
    {
        for (int k = 0; k < pair_count - j - 1; k++)
        {
            if (strength[k] < strength[k + 1])
            {
                temp_strength = strength[k];
                temp_winner = pairs[k].winner;
                temp_loser = pairs[k].loser;
                strength[k] = strength[k + 1];
                pairs[k].winner = pairs[k + 1].winner;
                pairs[k].loser = pairs[k + 1].loser;
                strength[k + 1] = temp_strength;
                pairs[k + 1].winner = temp_winner;
                pairs[k + 1].loser = temp_loser;
                //printf("strength[%i]: %i \n", k, strength[k]);        // print out swapped items
            }
            else
            {
                continue;
            }
        }
    }
    // check for strength and pair after sort
    for (int kk = 0; kk < pair_count; kk ++)
    {
        printf("strength[%i]: %i \n", kk, strength[kk]);
        printf("pair: %i winner: %i losser:%i \n", kk, pairs[kk].winner,  pairs[kk].loser);
    }
    return;
}

// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    // Put winner and loser from the pairs to determine T/F in locked array
    int a = pairs[0].winner;
    for (int i = 0; i < pair_count; i++)
    {
        if (!loop_check(pairs[i].winner, pairs[i].loser))
        {
            locked[pairs[i].winner][pairs[i].loser] = true;
        }
    }
    // print out locked array
    /*for (int k = 0; k < candidate_count; k++)
        {
            for (int t = 0; t < candidate_count; t++)
            {
                printf("locked[%i][%i] %i ", k, t, locked[k][t]);
            }
            printf("\n");
        }
    */
    return;
}

bool loop_check(int winner, int loser)
{
    // check if loser has connection with winner
    for (int i = 0; i < candidate_count; i++)
    {
        if (locked[loser][i] == true)
        {
            // If loser pointing the edge back to winner to make a loop
            if (i == winner)
            {
                return true;
            }
            // If loser does not have connection with winner
            else
            {
                if (loop_check(winner, i))
                {
                    return true;
                }
            }
        }
    }
    return false;
}

// Print the winner of the election
void print_winner(void)
{
    // Source of the graph who is winner and does not have any arrow pointing at them.
    int win = 0;
    for (int i = 0; i < candidate_count; i++)
    {
        bool a = false;
        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[j][i] != true)
            {
                continue;
            }
            else
            {
                a = true;
            }
        }
        if (!a)
        {
            win = i;
            printf("%s\n", candidates[win]);
        }
    }

    return;
}
